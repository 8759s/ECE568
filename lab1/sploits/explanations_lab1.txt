#Yuki Saito, 997981732, mintyplanet@gmail.com
#Vishrant Vasavada, 1000209320, v.vasavada@mail.utoronto.ca

sploit 1
There is a stackoverflow vulnerability due to a strcpy of a string of unknown length into a limited size buffer (96 bytes). It is possible to craft an exploit string that overwrites the stored return address of the lab_main function and redirect control flow to the shellcode. The exploit string will consist of the shellocode at the beginning, and the return address in little endian order at a specific distance from the beginning of the buffer such that it overlaps the saved rip on the stack. The remaining parts of the buffer is filled with NOP.

sploit2
The vulnerability in target2 is that is it allowed to copy a maximum of 272 bytes from arg to buf when buf is only allocated 256 bytes. Hence, we can overwrite the variables i and len. The return address is 280 bytes away from the buffer. To continue the iteration, we overwrite the value of len to 283. Now, len is calculated through strlen and so we need to get rid of NULL in our exploit string. To get around the inevitable NULL we need to overwrite len, we put second half of our exploit string in env.

sploit3
The vulnerability in target3 is similar to that in target1. It copies string up to maximum of 88 bytes from arg to targ when targ can only hold 64 bytes. The return address of lab_main is 72 bytes away from targ. Since it starts with AAAA, we add few NOP, shellcode, again few NOP to pad it and then address of targ to overwrite return address.

sploit4
This is similar to sploit2. The target attempts to bound the length of string being copied, but since we can overflow the buffer over the len variable, we can manipulate the len and i variables and ultimately overwrite the saved rip on the stack.Special care was taken to choose the values to overwrite len and i, as they would be copied byte at a time from the low order bits. The exploit string looks like this.
 [shellcode...][NOP][NOP][NOP]...[NOP][NOP][value len][value i][NOP][NOP][NOP][retaddr]